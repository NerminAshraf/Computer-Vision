function [cat,score] = similarity2(install,categories,centroids,strain,imagepath,annotpath,bound,maxcounter)
%Similarity Finds closest maxcount categories to the object
%   This finds the category which best describes the object.
%install will install vl_sift
%categories contains categories generated by BagofFeatures feature
%extraction.

%imagepath will contain the image pathway
%annotation pathway of the image provided.
%strain will contain the bag of words.
%bound uses the bounding box
%maxcount controls the number of best n results.

imagepath = '101_ObjectCategories\Faces\image_0001.jpg';
annotpath = 'Annotations\Faces_2\annotation_0001.mat';
%first get bag of words for the test image.

%trainnum
[rCt,cCt] = size(centroids);
bag = zeros(1,cCt);
bagtotal = zeros(1,cCt);


if install ==1
run('vlfeatroot/toolbox/vl_setup')
vl_version verbose
end


%char(categories(i))
%[ci,ri] =  (size(images1));

%show_annotation(imagepath,annotpath) take this off

testimage = imread(imagepath);
%show_annotation(testimage,str(annotate))
annotate = load(annotpath);
box_coord = annotate.box_coord;
%show_annotation(testimage,annotate)

[rim,cim,dim]= size(testimage);
dim;
if dim == 1
else
testimage = rgb2gray(testimage); % convert the image to gray scale. (run through sift)
end

size(testimage)
box_coord(1)
if bound ==1
testimage2 = testimage(box_coord(1):box_coord(2),box_coord(3):box_coord(4));
else 
testimage2 = testimage;
end

%imshow(testimage2); take this off
%show_annotation('101_ObjectCategories/accordion/image_0001.jpg','Annotations\accordion\annotation_0001.mat')



[F,D] = vl_sift(single(testimage2));% extract feature points and descriptors.

%plot(F(1,:),F(2,:),'r+', 'MarkerSize', 2);
%We will try first collecting the clusters in one place 
%if compare ==0
%tocompare = D; 

[rD,cD]=size(D);

for fd =1:cD  
distance1 = zeros(1,cCt);
for ct = 1:cCt   %replace 25 with the k centroids
distance1(1,ct) = sqDistance(double(centroids(:,ct)),double(D(:,fd)));  %Here we want the minumum distance per feature then we assign that.
%similarity2(1,ct) = dumdistance(double(centroids(:,ct)),double(D(:,fd)));

hey =centroids(:,ct);
hey1 = D(:,fd);
end



[minval,clustAss]=min(distance1); %Assign that feature to the nearest cluster.
bag(clustAss) = bag(clustAss) +1; %Add a weight to that particular cluster. 
end


%Find the square distance to each centroid.  
%Take the least square distance and assign it to the histogram.

%test_bag = struct('bag',bag,'image',imagepath);  %might change straight into bag and remove this.
test_bag = bag;


%bag = zeros(1,cCt);

%bagav = bagtotal/testnum   %average of the histogram of bags.

%s(i) = struct('bag',bags,'cat',categories(i));

 % For all categories

%Get the size of the bagoffeatures of the training set.
[r,c]=size(strain);
similarity = zeros(r,c);
%categories ='';


%strain
%for each category compare the bag of words of strain with stest.
%positives =0;
%errors = 0;

%for i = 1:c  %for all the categories




%test_bags = stest(i).bag;

%[rt,ct] = size(test_bags); %ct is the number of test bags.

%testcategory = stest(i).cat;
%for j = 1:ct
%test_bag = test_bags(j).bag;

%similarity = zeros(r,c);
for k =1:c    %for all items in the training set find the similarity
train_bag =  strain(k).bag;  %compare bag of features of one image with that of the training set.
dist = nearestn(test_bag,train_bag); %calculate the similarity using nearest neighbour.
categ = strain(k).cat;

similarity(k) = dist;
categories(k) = cellstr(categ);

end


counter = 1;
cat = 0;
score =0;
%Find the top 5 elements.
similarity;
categories;
while(counter <=maxcounter)
[a,b]=max(similarity);  %a is the similarity score, b the index.
if counter ==1
cat1 = categories(b);
score = a* 100;

else
cat1 = horzcat(cat1,categories(b));
score = horzcat(score,a*100);    
end

counter = counter + 1;
similarity(b) =0; %Takes off the highest score.
end

score;

str1 = 'The image is:';
for im = 1:maxcounter
Str = strcat('The image is_',cat1(im),' by: ');
disp(Str); disp(score(im));

end


end


